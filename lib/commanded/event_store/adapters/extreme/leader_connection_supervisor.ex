defmodule Commanded.EventStore.Adapters.Extreme.LeaderConnectionSupervisor do
  @moduledoc """
  The LeaderConnectionSupervisor keeps a single child Spear.Connection with a
  # dynamic config.

  The leader connection should always be connected to the leader node in a
  # cluster and is accessible via name generated by `Config.leader_conn_name/1`

  The main way of interacting with the LeaderConnectionSupervisor is through
  LeaderConnectionManager.
  """

  use Supervisor

  require Logger

  alias Commanded.EventStore.Adapters.Extreme.Config

  def start_link(config) do
    Logger.debug("LeaderConnectionSupervisor (#{inspect(self())}) start_link")

    name = Keyword.fetch!(config, :adapter_name) |> Config.leader_conn_supervisor_name()
    Supervisor.start_link(__MODULE__, config, name: name)
  end

  @impl Supervisor
  def init(_config) do
    Logger.debug("LeaderConnectionSupervisor (#{inspect(self())}) init")
    Supervisor.init([], strategy: :one_for_one)
  end

  def start_leader_connection(leader_conn_supervisor_name, conn_config) do
    Logger.debug(
      "LeaderConnectionSupervisor (#{inspect(self())}) start_leader_connection #{inspect(conn_config)}"
    )

    case Supervisor.start_child(
           leader_conn_supervisor_name,
           {Spear.Connection, conn_config}
         ) do
      {:ok, _pid} ->
        :ok

      {:ok, _pid, _info} ->
        :ok

      {:error, {:already_started, _pid}} ->
        :ok

      errors ->
        errors
    end
  end

  def refresh_leader_connection(leader_conn_supervisor_name, conn_config) do
    Logger.debug(
      "LeaderConnectionSupervisor (#{inspect(self())}) refresh_leader_connection #{inspect(conn_config)}"
    )

    Supervisor.terminate_child(leader_conn_supervisor_name, Spear.Connection)
    Supervisor.delete_child(leader_conn_supervisor_name, Spear.Connection)
    start_leader_connection(leader_conn_supervisor_name, conn_config)
  end
end
